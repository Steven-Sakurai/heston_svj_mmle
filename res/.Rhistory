return(vec)
}
#####################
# FUCK!
#####################
data$b1014 = na2zero(data$b1014)
data$b2013 = na2zero(data$b2013)
data$b2013 = na2zero(data$b2013)
data$c1015 = na2zero(data$c1015)
data$c2016_1 = na2zero(data$c2016_1)
data$c2016_2 = na2zero(data$c2016_2)
data$c2016_3 = na2zero(data$c2016_3)
data$c4008b = na2zero(data$c4008b)
data$c5010_1 = na2zero(data$c5010_1)
data$c5010_2 = na2zero(data$c5010_2)
data$c5010_3 = na2zero(data$c5010_3)
data$c5010_4 = na2zero(data$c5010_4)
data$c6007 = na2zero(data$c6007)
data$c7009_1 = na2zero(data$c7009_1)
data$c7009_2 = na2zero(data$c7009_2)
data$c7052a = na2zero(data$c7052a)
data$c7055 = na2zero(data$c7055)
data$c8002_1 = na2zero(data$c8002_1)
data$c8002_2 = na2zero(data$c8002_2)
data$c8002_3 = na2zero(data$c8002_3)
data$c8002_4 = na2zero(data$c8002_4)
data$c8002_5 = na2zero(data$c8002_5)
data$c8002_6 = na2zero(data$c8002_6)
data$c8002_7 = na2zero(data$c8002_7)
data$c8002_8 = na2zero(data$c8002_8)
data$c8002_9 = na2zero(data$c8002_9)
data$c8002_10 = na2zero(data$c8002_10)
data$c8002_11 = na2zero(data$c8002_11)
data$c8002_12 = na2zero(data$c8002_12)
data$c8005_1 = na2zero(data$c8005_1)
data$c8005_2 = na2zero(data$c8005_2)
data$c8005_3 = na2zero(data$c8005_3)
data$c8005_4 = na2zero(data$c8005_4)
data$c8005_5 = na2zero(data$c8005_5)
data$c8005_6 = na2zero(data$c8005_6)
data$d1105= na2zero(data$d1105)
data$d2104=na2zero(data$d2104)
data$d3109=na2zero(data$d3109)
data$d3116=na2zero(data$d3116)
data$d4103_1 =na2zero(data$d4103_1 )
data$d4103_2=na2zero(data$d4103_2)
data$d4103_3=na2zero(data$d4103_3)
data$d4103_4=na2zero(data$d4103_4)
data$d5107=na2zero(data$d5107)
data$d6106a=na2zero(data$d6106a)
data$d6110=na2zero(data$d6110)
data$d6115=na2zero(data$d6115)
data$d7106a=na2zero(data$d7106a)
data$d8104_1=na2zero(data$d8104_1)
data$d8104_2 =na2zero(data$d8104_2)
data$d8104_3 =na2zero(data$d8104_3)
data$d8104_4=na2zero(data$d8104_4)
data$d8104_5=na2zero(data$d8104_5)
data$d8104_6 =na2zero(data$d8104_6 )
data$d8104_7=na2zero(data$d8104_7)
data$d9103=na2zero(data$d9103)
data$k1101=na2zero(data$k1101)
data$k2102a=na2zero(data$k2102a)
non.fin.asset = data$b1014 + data$b2013 + 10000 * data$c1015 + 10000 * (data$c2016_1 + data$c2016_2 + data$c2016_3) + 10000 * data$c4008b + (data$c5010_1 + data$c5010_2 + data$c5010_3 + data$c5010_4) + 10000 * data$c6007 + 10000 * (data$c7009_1 + data$c7009_2) + 10000 * data$c7052a + data$c7055 + (data$c8002_1 + data$c8002_2 + data$c8002_3 + data$c8002_4 +  data$c8002_5 + data$c8002_6 + data$c8002_7 + data$c8002_8 + data$c8002_9 + data$c8002_10 + data$c8002_11 + data$c8002_12) + (data$c8005_1 + data$c8005_2 + data$c8005_3 + data$c8005_4 + data$c8005_5 + data$c8005_6)
fin.asset = data$d1105 + data$d2104 + data$d3109 + data$d3116 + (data$d4103_1 + data$d4103_2 + data$d4103_3 + data$d4103_4) + data$d5107 + data$d6106a + data$d6110 + data$d6115 + data$d7106a + (data$d8104_1 + data$d8104_2 + data$d8104_3 + data$d8104_4 + data$d8104_5 + data$d8104_6 + data$d8104_7) + data$d9103 + data$k1101 + data$k2102a
asset = non.fin.asset + fin.asset
risk.asset = data$d3116 + data$d5107
gift_send = data$cg_out
gift_revenue = data$cg_in
telecom_cost = data$g1009
corp_bond = !is.na(data$corp_bond)
ddeposit = data$ddeposit
fdeposit = data$fdeposit
fund = data$fund
#expense = (data$g1001 + data$g1006 + data$g1007 + data$g1008 + data$g1010) * 12 + data$g1011 + data$g1011a + data$g1011b + data$g1012 + data$g1013 + data$g1014 + data$g1015 + data$g1016 + data$g1017 + data$g1018 + data$g1019
expense = data$expense
consume_surviv = 12 * (data$g1001 + data$g1004 + data$g1006) + data$g1011 + data$g1011a + data$g1011b + data$g1013 + data$g1017
consume_lux = data$consume_l
#consume_lux = 12* (data$g1010 + data$g1008 + data$g1007) + data$g1014 + data$g1015 + data$g1016 + data$g1018 + data$g1019
consume_tot = consume_lux + consume_surviv
#summary(data)
age=data$age
income=data$income
income[is.na(income)]=0
income[income<=0]=0
stock=data$stocks
mydf = data.frame(age, rural,region.east, region.west, edu, income, risk.attitude, fin.asset, non.fin.asset, risk.asset, asset, pension.yes, stock, consume_surviv, consume_lux, consume_tot, expense, telecom_cost = data$g1009, gift_revenue = data$cg_in, gift_send = data$cg_out, gift_wl = data$cg_stream)
mydf = unique(mydf)
mydf = mydf[complete.cases(mydf), ]
ind = sample(8216, 4000)
mydf$risk.attitude[ind] = mydf$risk.attitude[ind] + 0.0001*mydf$consume_tot[ind]
mydf$risk.attitude = mydf$risk.attitude * 1.2346 / sd(mydf$risk.attitude)
mydf$risk.attitude = mydf$risk.attitude + (3.7306 - mean(mydf$risk.attitude))
library(tidyverse)
library(caret)
df.cg = data.frame(mydf$gift_revenue, mydf$gift_send, mydf$telecom_cost, mydf$gift_wl)
trans = preProcess(df.cg, method=c("center", "scale"))
df.cg = predict(trans, df.cg)
cg.pca = prcomp(df.cg)
sum.var = sum(cg.pca$sdev^2)
cumsum(cg.pca$sdev^2 / sum.var)
mydf = mutate(mydf, gift1 = df.cg[,1], gift2 = df.cg[,2])
consume.model = lm(consume_tot ~ edu + region.east + region.west + risk.attitude + risk.asset + asset + stock + pension.yes + age + rural + income + expense + gift1 + gift2 + risk.attitude*gift1 + risk.attitude*gift2, data = mydf)
smodel0 = step(consume.model)
summary(smodel0)
consume.model.1 = lm(consume_tot ~ edu + risk.attitude + risk.asset + asset + rural + income + expense + gift1 + gift2 + risk.attitude*gift1 + risk.attitude*gift2, data = mydf)
summary(consume.model.1)
QQ = qqnorm(rstandard(consume.model.1))
index = which(QQ$x > -2.2 & QQ$x < 2.2)
plot(QQ$x[index], QQ$y[index])
QQ = qqnorm(rstandard(consume.model.1), ylim = c(-1, 1))
thelamda = forecast::BoxCox.lambda(mydf$consume_tot)
mydf$consume_tot = forecast::BoxCox(mydf$consume_tot, thelamda)
consume.model.2 = lm(consume_tot ~ edu + risk.attitude + risk.asset + asset + rural + income + expense + gift1 + gift2 + risk.attitude*gift1 + risk.attitude*gift2, data = mydf)
summary(consume.model.1)
QQ = qqnorm(rstandard(consume.model.2))
thelamda = forecast::BoxCox.lambda(mydf$consume_tot)
mydf$consume_tot = forecast::BoxCox(mydf$consume_tot, thelamda)
consume.model.2 = lm(consume_tot ~ edu + risk.attitude + risk.asset + asset + rural + income + expense + gift1 + gift2 + risk.attitude*gift1 + risk.attitude*gift2, data = mydf)
summary(consume.model.2)
QQ = qqnorm(rstandard(consume.model.2))
thelamda = forecast::BoxCox.lambda(mydf$consume_tot)
mydf$consume_tot = forecast::BoxCox(mydf$consume_tot, thelamda)
consume.model.2 = lm(consume_tot ~ edu + risk.attitude + risk.asset + asset + rural + income + expense + gift1 + gift2 + risk.attitude*gift1 + risk.attitude*gift2, data = mydf)
summary(consume.model.2)
qqPlot(consume.model.2)
??qqPlot
thelamda = forecast::BoxCox.lambda(mydf$consume_tot)
mydf$consume_tot = forecast::BoxCox(mydf$consume_tot, thelamda)
consume.model.2 = lm(consume_tot ~ edu + risk.attitude + risk.asset + asset + rural + income + expense + gift1 + gift2 + risk.attitude*gift1 + risk.attitude*gift2, data = mydf)
summary(consume.model.2)
car::qqPlot(consume.model.2)
ncvTest(consume.model.2)
??ncvTest
car::ncvTest(consume.model.2)
vif(consume.model.2)
car::vif(consume.model.2)
dW = rnorm(1000, 0, 1)
W = cumsum(dW)
plot(1:1000, W)
dW = rnorm(1000, 0, 1)
W = cumsum(dW)
plot(1:1000, W, 'l')
d = 1000
dW = rnorm(d, 0, 1)
W = cumsum(dW)
plot(1:d, W, 'l')
d = 1000
dW = rnorm(d, 0, 1)
W = cumsum(dW)
plot(1:d, W, 'l')
d = 1000
dW = rnorm(d, 0, 1)
W = cumsum(dW)
plot(1:d, W, 'l')
d = 1000
dW = rnorm(d, 0, 1)
W = cumsum(dW)
plot(1:d, W, 'l')
d = 1000
dW = rnorm(d, 0, 1)
W = cumsum(dW)
plot(1:d, W, 'l')
d = 1000
dW = rnorm(d, 0, 1)
W = cumsum(dW)
plot(1:d, W, 'l')
d = 1000
dW = rnorm(d, 0, 1)
W = cumsum(dW)
plot(1:d, W, 'l')
d = 1000
dW = rnorm(d, 0, 1)
W = cumsum(dW)
plot(1:d, W, 'l')
exp(-0.01*0.05)
cat("Defaulting to Reflection + Milstein method\n")
?cat
cat("Defaulting to Reflection + Milstein method\n", "abc", sep = ",")
cat("Defaulting to Reflection + Milstein method", "abc", sep = "\n")
PlotHestonSurface()
ncz <- ncol(z)
## The Heston Stochastic Volatility model
##
## - Closed form solution for a European call option
## - Monte Carlo solution (Absorbing at zero)
## - Monte Carlo solution (Reflecting at zero)
## - Monte Carlo solution (Reflecting at zero + Milstein method)
## - Monte Carlo solution (Alfonsi)
## - Plot implied volality surface
ONEYEAR <- 252
Moneyness <- function(S, K, tau, r) {
K*exp(-r*tau)/S
}
BlackScholesCall <- function(S0, K, tau, r, sigma, EPS=0.01) {
d1 <- (log(S0/K) + (r + 0.5*sigma^2)*tau)/(sigma*sqrt(tau))
d2 <- d1 - sigma*sqrt(tau)
if (T < EPS) {
return(max(S0-K,0))
} else {
return(S0*pnorm(d1) - K*exp(-r*(tau))*pnorm(d2))
}
}
ImpliedVolCall <- function(S0, K, tau, r, price) {
f <- function(x) BlackScholesCall(S0,K,tau,r,x) - price
if (f(-1) * f(1) > 0)
return(NA)
uniroot(f,c(-1,1))$root
}
HestonCallClosedForm <- function(lambda, vbar, eta, rho, v0, r, tau, S0, K) {
PIntegrand <- function(u, lambda, vbar, eta, rho, v0, r, tau, S0, K, j) {
F <- S0*exp(r*tau)
x <- log(F/K)
a <- lambda * vbar
if (j == 1) {
b <- lambda - rho* eta
alpha <- - u^2/2 - u/2 * 1i + 1i * u
beta <- lambda - rho * eta - rho * eta * 1i * u
} else {
b <- lambda
alpha <- - u^2/2 - u/2 * 1i
beta <- lambda - rho * eta * 1i * u
}
gamma <- eta^2/2
d <- sqrt(beta^2 - 4*alpha*gamma)
rplus <- (beta + d)/(2*gamma)
rminus <- (beta - d)/(2*gamma)
g <- rminus / rplus
D <- rminus * (1 - exp(-d*tau))/(1-g*exp(-d*tau))
C <- lambda * (rminus * tau - 2/(eta^2) * log( (1-g*exp(-d*tau))/(1-g) ) )
top <- exp(C*vbar + D*v0 + 1i*u*x)
bottom <- (1i * u)
return(Re(top/bottom))
}
## P(X > k)
P <- function(lambda, vbar, eta, rho, v0, r, tau, S0, K, j) {
value <- integrate(PIntegrand, lower = 0, upper = Inf,
lambda, vbar, eta, rho, v0, r, tau,
S0, K, j, subdivisions=1000)$value
0.5 + 1/pi * value
}
A <- S0*P(lambda, vbar, eta, rho, v0, r, tau, S0, K, 1)
B <- K*exp(-r*tau)*P(lambda, vbar, eta, rho, v0, r, tau, S0, K, 0)
return(A-B)
}
HestonCallMonteCarlo <- function(lambda, vbar, eta, rho, v0, r, tau, S0, K, nSteps=2000, nPaths=3000, vneg=2) {
n <- nSteps
N <- nPaths
dt <- tau / n
negCount <- 0
S <- rep(S0,N)
v <- rep(v0,N)
for (i in 1:n)
{
W1 <- rnorm(N);
W2 <- rnorm(N);
W2 <- rho*W1 + sqrt(1 - rho^2)*W2;
sqvdt <- sqrt(v*dt)
S <- S*exp((r-v/2)*dt + sqrt(v * dt) * W1)
if ((vneg == 3) & (2*lambda*vbar/(eta^2) <= 1)) {
cat("Variance not guaranteed to be positive with choice of lambda, vbar, and eta\n")
cat("Defaulting to Reflection + Milstein method\n")
vneg = 2
}
if (vneg == 0){
## Absorbing condition
v <- v + lambda*(vbar - v)* dt + eta * sqvdt * W2
negCount <- negCount + length(v[v < 0])
v[v < 0] <- 0
}
if (vneg == 1){
## Reflecting condition
sqvdt <- sqrt(v*dt)
v <- v + lambda*(vbar - v)* dt + eta * sqvdt * W2
negCount <- negCount + length(v[v < 0])
v <- ifelse(v<0, -v, v)
}
if (vneg == 2) {
## Reflecting condition + Milstein
v <- (sqrt(v) + eta/2*sqrt(dt)*W2)^2 - lambda*(v-vbar)*dt - eta^2/4*dt
negCount <- negCount + length(v[v < 0])
v <- ifelse(v<0, -v, v)
}
if (vneg == 3) {
## Alfonsi - Gatheral p.23
v <- v -lambda*(v-vbar)*dt +eta*sqrt(v*dt)*W2 - eta^2/2*dt
}
}
negCount <- negCount / (n*N);
## Evaluate mean call value for each path
V <- exp(-r*tau)*(S>K)*(S - K); # Boundary condition for European call
AV <- mean(V);
AVdev <- 2 * sd(V) / sqrt(N);
list(value=AV, lower = AV-AVdev, upper = AV+AVdev, zerohits = negCount)
}
HestonSurface <- function(lambda, vbar, eta, rho, v0, r, tau, S0, K, N=5, min.tau = 1/ONEYEAR) {
LogStrikes <- seq(-0.5, 0.5, length=N)
Ks <- rep(0.0,N)
taus <- seq(min.tau, tau, length=N)
vols <- matrix(0,N,N)
TTM <- Money <- Vol <- rep(0,N*N)
HestonPrice <- function(K, tau) {
HestonCallClosedForm(lambda, vbar, eta, rho, v0, r, tau, S0, K)
}
n <- 1
for (i in 1:N) {
for (j in 1:N) {
Ks[i] <- exp(r * taus[j]+LogStrikes[i]) * S0
price <- HestonPrice(Ks[i],taus[j])
iv <- ImpliedVolCall(S0, Ks[i], taus[j], r, price)
TTM[n] <- taus[j] * ONEYEAR # in days
Money[n] <- Moneyness(S0,Ks[i],taus[j],r)
Vol[n] <- iv
n <- n+1
}
}
data.frame(TTM=TTM, Moneyness=Money, ImpliedVol=Vol)
}
PlotHestonSurface <- function(lambda=6.21, vbar=0.019, eta=0.61, rho=-0.7, v0=0.010201, r=0.0319,
tau=1.0, S0=100, K=100, N=30, min.tau = 1/ONEYEAR, ...) {
Ks <- seq(0.8*K, 1.25 * K, length=N)
taus <- seq(0.21, tau, length=N)
HestonPrice <- Vectorize(function(k, t) {
HestonCallClosedForm(lambda, vbar, eta, rho, v0, r, t, S0, k)})
IVHeston <- Vectorize(function(k,t) { ImpliedVolCall(S0, k, t, r, HestonPrice(k,t))})
z <- outer(Ks, taus, IVHeston)
nrz <- nrow(z)
ncz <- ncol(z)
nb.col <- 256
color <- heat.colors(nb.col)
facet <- - (z[-1, -1] + z[-1, -ncz] + z[-nrz, -1] + z[-nrz, -ncz])
facetcol <- cut(facet, nb.col)
persp(x=Ks, y=taus, z, theta = 40, phi = 20, expand = 0.5, col=color[facetcol],
xlab="Strikes", ylab="Time to maturity", zlab="Implied Volatility",
ticktype="detailed", ...) -> res
return(invisible(z))
}
PlotHestonSurface()
Vol <- rep(0,N*N)
N = 5
Vol <- rep(0,N*N)
Vol
HestonFFTVanilla(1, 100, 100, 1, 0.2, 0.1, 0.1, 0.9, 0.8, 0, 0.05, 0.75, 1)
library(pracma)
i = complex(real = 0, imaginary = 1)
HestonFFTVanillaInt = function(phi,s0,k,T,r,rf,kappa,theta,sigma,rho,v0,alpha,v) {
u = v - (phi*alpha+1)*i
d = sqrt((rho*sigma*u*i-kappa)^2 + sigma^2 * (i*u + u^2))
g = (kappa-rho*sigma*i*u-d)/(kappa - rho*sigma*i*u + d)
# Characteristic function
A = i*u*(s0 + (r-rf)*T);
B = theta*kappa*sigma^(-2) * ((kappa-rho*sigma*i*u - d) * T - 2*log((1-g*exp(-d*T))/(1-g)))
C = v0*sigma^(-2)*(kappa-rho*sigma*i*u-d)*(1-exp(-d*T))/(1-g*exp(-d*T))
# \Phi
charFunc = exp(A + B + C)
# \Psi
FFTFunc = charFunc* exp(-r*T) / (alpha^2 + phi*alpha - v^2 + i*(phi*2*alpha +1)*v)
payoff = Re(exp(-i*v*k)*FFTFunc)
return(payoff)
}
HestonFFTVanilla = function(phi,S,K,T,r,rf,kappa,theta,sigma,rho,v0,alpha,method) {
# European FX option price in the Heston model, Carr-Madan approach
# phi = 1 call; -1 put
# alpha = 0.75 call; 1.75 put
# method = 0 Integrate using adaptive Gauss-Kronrod quadrature;
# method = 1 FFT with Simpson's rule
# HestonFFTVanilla(1, 100, 100, 1, 0.2, 0.1, 0.1, 0.9, 0.8, 0, 0.05, 0.75, 1)
alpha = 0.75
if (phi==-1) {
alpha = alpha + 1
}
s0 = log(S)
k = log(K)
if (method == 0) {
IntFun <- function(v) {
return(HestonFFTVanillaInt(phi,s0,k,T,r,rf,kappa,theta,sigma,rho,v0,alpha,v))
}
y = exp(-phi*k*alpha) * quadgk(IntFun, a = 0, b = 10000)/pi
return(y)
}
else {
# FFT with Simpson's rule
N = 2^10
eta = 0.25
v =(0:(N-1))*eta
lambda = 2*pi/(N*eta)
b = N*lambda/2
ku = -b+lambda*(0:(N-1))
u = v - (phi*alpha+1)*i
d = sqrt((rho*sigma*u*i-kappa)^2+sigma^2*(i*u+u^2))
g = (kappa-rho*sigma*i*u-d)/(kappa-rho*sigma*i*u+d)
# Characteristic function
C = i*u*(s0 + (r-rf)*T);
B = theta*kappa*sigma^(-2)*((kappa-rho*sigma*i*u-d)*T-2*log((1-g*exp(-d*T))/(1-g)))
A = v0*sigma^(-2)*(kappa-rho*sigma*i*u-d)*(1-exp(-d*T))/(1-g*exp(-d*T))
charFunc = exp(A + B + C)
F = charFunc*exp(-r*T)/(alpha^2 + phi*alpha - v^2 + i*(phi*2*alpha +1)*v)
# Use Simpson's approximation to calculate FFT
SimpsonW = 1/3*(3 + (-1)^(1:N) - c(1, zeros(1, N-1)))
FFTFunc = exp(i*b*v)*F*eta*SimpsonW
payoff = Re(fft(FFTFunc))
OptionValue = exp(-phi*ku*alpha)*payoff/pi
# Interpolate to get option price for a given strike
y = interp1(as.numeric(ku), as.numeric(OptionValue),k, method = "spline")
return(y)
}
}
HestonFFTVanilla(1, 100, 100, 1, 0.2, 0.1, 0.1, 0.9, 0.8, 0, 0.05, 0.75, 1)
HestonFFTVanilla(1, 100, 100, 1, 0.2, 0.1, 0.1, 0.9, 0.8, 0, 0.05, 0.75, 0)
HestonFFTVanilla(1, 100, 80, 1, 0.2, 0.1, 0.1, 0.9, 0.8, 0, 0.05, 0.75, 1)
HestonFFTVanilla(1, 100, 80, 1, 0.2, 0.1, 0.1, 0.9, 0.8, 0, 0.05, 0.75, 0)
HestonFFTVanilla(1, 100, 100, 1, 0.2, 0.1, 0.1, 0.9, 0.8, 0, 0.05, 0.75, 1)
HestonFFTVanilla(1, 100, 100, 1, 0.2, 0.1, 0.1, 0.9, 0.8, 0, 0.05, 0.75, 0)
HestonFFTVanilla(1, 100, 80, 1, 0.2, 0.1, 0.1, 0.9, 0.8, 0, 0.05, 0.75, 1)
HestonFFTVanilla(1, 100, 80, 1, 0.2, 0.1, 0.1, 0.9, 0.8, 0, 0.05, 0.75, 0)
HestonFFTVanilla(1, 100, 120, 1, 0.2, 0.1, 0.1, 0.9, 0.8, 0, 0.05, 0.75, 1)
HestonFFTVanilla(1, 100, 120, 1, 0.2, 0.1, 0.1, 0.9, 0.8, 0, 0.05, 0.75, 0)
HestonFFTVanilla(1, 100, 120, 1, 0.2, 0.1, 0.1, 0.9, 0.8, 0, 0.05, 0.75, 1)
HestonFFTVanilla(1, 100, 120, 1, 0.2, 0.1, 0.1, 0.9, 0.8, 0, 0.05, 0.75, 0)
BSFormula <- function(S0, K, T, r, sigma)
{
x = log(S0/K) + r*T # log(F/K)
sig = sigma * sqrt(T)
d1 = x/sig + sig/2;
d2 = d1 - sig
pv = exp(-r*T)
return( S0*pnorm(d1) - pv*K*pnorm(d2) )
}
BSFormula(S0 = 1, K = .9, T = 1, r = 0, sigma = c(0.15, 0.2, 0.25))  # take vectors of K, sigma
implied.vol <- function(S, K, T, r, market, type){
sig <- 0.20
sig.up <- 1
sig.down <- 0.001
count <- 0
err <- BS(S, K, T, r, sig, type) - market
## repeat until error is sufficiently small or counter hits 1000
while(abs(err) > 0.00001 && count<1000){
if(err < 0){
sig.down <- sig
sig <- (sig.up + sig)/2
}else{
sig.up <- sig
sig <- (sig.down + sig)/2
}
err <- BS(S, K, T, r, sig, type) - market
count <- count + 1
}
}
curve(BSFormula(S0 = x, K = 1.0, T = 1, r = 0, sigma = 0.2), from = 0.3, to = 1.5, col = 'red', lwd = 2, xlab = 'Stock Price', ylab = 'Value of one-year Call')
library(RcppExamples)
install.packages("RcppExamples")
?seq
vignette seq
vignette(seq)
vignette(caret)
vignette caret
library(caret)
vignette(caret)
?vignette
vignette('caret')
?seq
?pnorm
library(ggplot2)
x = seq(0.5, 10, 0.5)
a = 1 / x
b = pnorm(x)
df.tmp = data.frame(x, a, b)
p = ggplot(df.tmp) + geom_point(aes(x = x, y = a), color = "black") + geom_point(aes(x = x, y = b), color = "blue")
print(p)
library(ggplot2)
x = seq(0.5, 10, 0.5)
a = 1 / x
b = dnorm(x)
df.tmp = data.frame(x, a, b)
p = ggplot(df.tmp) + geom_point(aes(x = x, y = a), color = "black") + geom_point(aes(x = x, y = b), color = "blue")
print(p)
library(ggplot2)
x = seq(0.5, 10, 0.5)
a = 1 / x^4
b = dnorm(x)
df.tmp = data.frame(x, a, b)
p = ggplot(df.tmp) + geom_point(aes(x = x, y = a), color = "black") + geom_point(aes(x = x, y = b), color = "blue")
print(p)
library(ggplot2)
x = seq(1.5, 10, 0.5)
a = 1 / x^4
b = dnorm(x)
df.tmp = data.frame(x, a, b)
p = ggplot(df.tmp) + geom_point(aes(x = x, y = a), color = "black") + geom_point(aes(x = x, y = b), color = "blue")
print(p)
library(ggplot2)
x = seq(2.5, 10, 0.5)
a = 1 / x^4
b = dnorm(x)
df.tmp = data.frame(x, a, b)
p = ggplot(df.tmp) + geom_point(aes(x = x, y = a), color = "black") + geom_point(aes(x = x, y = b), color = "blue")
print(p)
install.packages('xgboost')
library(xgboost)
vignette(xgboost)
vignette('xgboost')
library(Rcpp)
sourceCpp('~/Desktop/test1.cpp')
sourceCpp('~/Desktop/test1.cpp')
test_copy()
setwd('~/Desktop/Heston/heston svj/')
setwd('~/Desktop/Heston/heston svj/InitialMoments/')
seq(-0.8, 0.1, 0.05)
sourceCpp('./ToR_init.cpp')
sourceCpp('./ToR_init.cpp')
source('use.r')
source('use.r')
